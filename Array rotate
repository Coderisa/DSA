Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.
Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
BRUTE FORCE
T-O(N)
S-O(N)
class Solution {
    public void rotate(int[] nums, int k) {
        int l=nums.length;
        int temp []=new int[l];
        if((l==0)|(k%l==0))
        return;
        for(int i=0;i<l;i++){
            int t=(i+k)%l;//FORMULA
            temp[t]=nums[i];


        }
        for(int i=0;i<l;i++)
        nums[i]=temp[i];
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
OPTIMAL
T=O(N)
S-O(1)
class Solution {
    public void rotate(int[] nums, int k) {
        k %= nums.length;
        reverse(nums, 0, nums.length-1);//whole array reverse
        reverse(nums, 0, k-1);//k variables revesal
        reverse(nums, k, nums.length-1);//end shifted variables reversal
    }

    public void reverse(int[] nums, int start, int end){
        while(start < end){
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }
}
